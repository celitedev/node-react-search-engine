@import "./shared";

.formGroup {
  @include margin(bottom);
}

.formLabel {
  font-weight: 600;
  padding: $input-padding-y $input-padding-x;
  margin-bottom: 0;
}

.formControlContainer {
}

.formButtons {
  @include margin(top);
}

.formControl {
  display: block;
  width: 100%;
  // // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  // height: $input-height;
  padding: $input-padding-y $input-padding-x;
  font-size: $font-size-base;
  line-height: $line-height;
  color: $input-color;
  background-color: $input-bg;
  // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214.
  background-image: none;
  border: $border-width solid $input-border;
  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  border-radius: $input-border-radius;

  // Make inputs at least the height of their button counterpart (base line-height + padding + border).
  // Only apply the height to textual inputs and some selects.
  // &:not(textarea),
  // &:not(select[size]),
  // &:not(select[multiple]) {
  //   height: $input-height;
  // }

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus();

  // Placeholder
  &::placeholder {
    color: $input-color-placeholder;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-bg-disabled;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  &:disabled {
    cursor: $cursor-disabled;
  }

  &.hasError {
    border-color: $color-danger;
  }
}

// Fix for react-select
.hasError {
  :global(.Select-control) {
    border-color: $color-danger;
  }
}

.formErrors {
  display: block;
  color: $color-danger;
  @include margin(y, sm);
}

.formControlStatic {
  min-height: $input-height;
  padding-top: $input-padding-y;
  padding-bottom: $input-padding-y;
  margin-bottom: 0;
}

.formDivider {
  width: 100%;
  border: 0;
  height: 1px;
  background-image: linear-gradient(to right, rgba(0, 0, 0, 0), $color-border, rgba(0, 0, 0, 0));
  @include margin(y);
}

.formHelpText {
  color: $text-muted;
  display: block;
  @include margin(top, xs);
}

// Checkboxes and radios
.checkbox,
.radio,
.checkboxInline,
.radioInline {
  display: flex;
  flex-direction: row;
  align-items: center;
  position: relative;
  margin-top: ($spacer * .75);
  margin-bottom: ($spacer * .75);
  padding-left: 2px;

  input[type=checkbox],
  input[type=radio] {
    @include margin(right);
  }
}

.checkboxInline,
.radioInline {
  display: inline-flex;
  @include margin(right);

  &:last-child {
    margin-right: 0;
  }
}

input[type=checkbox],
input[type=radio] {
  &:after {
    content: '';
    background-color: $color-white;
    border-radius: $border-radius;
    border: 2px solid $color-border;
    display: block;
    height: 18px;
    width: 18px;
    position: absolute;
    top: 0;
    left: 0;
    cursor: pointer;
  }

  &[type=radio] {
    &:after {
      border-radius: 50%;
    }
  }
}
